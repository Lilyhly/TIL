什么是依赖注入？
依赖注入（DI）是一种设计模式，用于将对象的依赖关系从类内部移到类的外部。它的主要优点包括：

提高代码的可测试性：通过注入模拟对象，可以更容易地进行单元测试。
解耦代码：通过将依赖关系注入到类中，可以减少类之间的耦合度。
提高灵活性：允许在运行时更改依赖关系，而无需修改类的代码。
在Swift中实现DI的常用方法
构造函数注入：通过构造函数将依赖关系传递给类。
属性注入：通过设置属性来注入依赖关系。
方法注入：通过方法参数传递依赖关系。
当前代码的问题
当前代码中，你仍然在类内部创建了依赖对象实例，这违背了DI的原则。我们需要通过外部将依赖对象传递给类实例。
