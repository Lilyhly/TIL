
扩展（Extension）是 Swift 编程语言的一个功能，它允许向现有的类、结构体、枚举或协议添加新功能。通过扩展，您可以在不修改现有类型的情况下添加新功能。

使用扩展，您可以执行以下操作：

添加新方法：您可以向已经存在的类或结构体添加新方法。通过这种方式，您可以在该类型的实例上使用新功能。
添加新的计算属性：您可以向现有类型添加新的计算属性，以提供额外的信息。
添加新的初始化器：您可以向现有类型添加新的初始化器，以使用新的方式创建实例。
添加已存在协议的遵循：您可以使已经定义的协议适用于已有的类型。
添加新的下标：您可以向现有类型添加新的下标，以扩展对实例的访问。
使现有类型适合新的协议：您可以使已存在的类型适合新的协议，以便利用多态性。
例如，您可以这样编写一个扩展来向 Int 类型添加新方法：

extension Int {
    func squared() -> Int {
        return self * self
    }
}

let number = 5
let squaredNumber = number.squared() // 结果为 25
在这个例子中，我们向 Int 类型添加了一个 squared() 方法，用于获取该数字的平方值。现在，您可以在整数变量 number 上调用 squared() 方法来获得平方值。
