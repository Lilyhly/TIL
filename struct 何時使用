结构体（Struct）是 Swift 编程语言中使用的一种数据类型，它可以将相关数据组合在一起，定义为一个新的类型。结构体是值类型（Value Type），也称为值语义，这意味着当结构体实例被复制时，其值也会被复制，它们之间相互独立。

结构体通常在以下情况下使用：

简单数据建模：结构体可以使用属性（Properties）定义数据的特征。例如，可以使用结构体表示用户（User）、地址（Address）、书籍（Book）等数据。
需要值类型的情况：由于结构体是值类型，因此在复制和传递时，值会被复制，创建一个新的实例。这有助于安全地共享数据并防止意外副作用。
简单功能模块化：结构体可以具有方法（Methods）和关联值，因此可以用于逻辑分组和代码结构化。
协议遵循和扩展性：结构体可以遵循协议以定义接口，并使用扩展（Extension）向现有结构体添加功能。
结构体与类（Class）类似，但有重要的区别。结构体不能继承，并且由于它们是值类型，所以在内存使用方面更加高效。此外，结构体会自动初始化，因此不需要单独编写初始化方法。因此，通常在数据建模或实现简单的实用功能时使用结构体是常见的。

mutating关键字用于结构体（Struct）的方法（Method）中，允许修改结构体实例的属性值。Swift中，结构体和枚举（Enum）是值类型（Value Type），因此通常情况下，实例的属性在方法内部是不可变的。但是，通过使用mutating关键字，可以在方法内部修改属性的值。

举个例子，假设有以下结构体：


struct Counter {
    var count: Int
    
    mutating func increment() {
        count += 1
    }
}
上面的代码中，increment()方法会增加count属性的值，通过使用mutating关键字，该方法可以修改结构体的属性。现在我们来看一个使用该结构体来增加计数器的示例：

var myCounter = Counter(count: 0)
print(myCounter.count) // 输出: 0

myCounter.increment()
print(myCounter.count) // 输出: 1
在上面的代码中，我们调用increment()方法来增加myCounter实例的计数器。increment()方法内部能够修改count属性的值，这是因为我们使用了mutating关键字，将该方法声明为可修改的。
