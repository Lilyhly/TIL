1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될 때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.
1-1. 입력된 수가 짝수라면 2로 나눕니다. 
1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다. 
2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다. 
예를 들어, 주어진 수가 6이라면 6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1 이 되어 총 8번 만에 1이 됩니다. 위 작업을 몇 번이나 반복해야 하는지 반환하는 함수, solution을 완성해 주세요. 단, 주어진 수가 1인 경우에는 0을, 작업을 500번 반복할 때까지 1이 되지 않는다면 –1을 반환해 주세요.
제한 사항
입력된 수, num은 1 이상 8,000,000 미만인 정수입니다.
입출력 예
n	result
6	8
16	4
626331	-1
입출력 예 설명
입출력 예 #1
문제의 설명과 같습니다.
입출력 예 #2
16 → 8 → 4 → 2 → 1 이 되어 총 4번 만에 1이 됩니다.
입출력 예 #3
626331은 500번을 시도해도 1이 되지 못하므로 -1을 리턴해야 합니다.

以下是用 Swift 编写的解决方案，该函数接受一个整数 num 作为参数，计算经过Collatz猜想中的操作需要多少次才能使得输入的数变为 1。如果在500次操作内无法使其变为1，则返回-1。

func solution(_ num: Int) -> Int {
    var n = num
    var count = 0

    while n != 1 {
        if n % 2 == 0 {
            // 如果是偶数，除以2
            n /= 2
        } else {
            // 如果是奇数，乘以3再加1
            n = n * 3 + 1
        }

        count += 1

        // 500번 이상 반복해도 1이 되지 않으면 -1 반환
        if count >= 500 {
            return -1
        }
    }

    return count
}

// 示例用法
let result1 = solution(6)
print(result1)  // 输出: 8

let result2 = solution(16)
print(result2)  // 输出: 4

let result3 = solution(626331)
print(result3)  // 输出: -1




这个函数通过模拟Collatz猜想中的操作，计算了将输入的数变为1所需的步骤数。如果在500次操作内无法使其变为1，则返回-1。在示例用法中，solution(6) 返回 8，solution(16) 返回 4，solution(626331) 返回 -1。


让我们详细解释一下输入为 16 时的过程：

swift
Copy code
let result2 = solution(16)
print(result2)  // 输出: 4
函数开始时，n 的初始值为 16，count 的初始值为 0。

第一次循环：
16 是偶数，所以执行 n /= 2，n 变为 8。
count 变为 1。
第二次循环：
8 是偶数，所以执行 n /= 2，n 变为 4。
count 变为 2。
第三次循环：
4 是偶数，所以执行 n /= 2，n 变为 2。
count 变为 3。
第四次循环：
2 是偶数，所以执行 n /= 2，n 变为 1。
count 变为 4。
此时 n 变为 1，满足猜想条件，循环结束。最终 result2 的值为 4，因为经过4次操作，输入的数 16 变为了 1。
