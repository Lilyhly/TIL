当我们谈论 Swift 编程语言的生命周期时，我们通常指的是对象（如类、结构体和枚举）的生命周期，以及应用程序在运行时的生命周期。下面我们将分别讨论它们：

对象的生命周期
创建阶段（Initialization）： 对象被创建时，会调用其初始化方法（init），这是对象生命周期的开始阶段。在初始化方法中，您可以设置对象的初始状态。
使用阶段（Usage）： 在对象的使用阶段，您可以访问对象的属性和方法，并根据需要对其进行更改。
销毁阶段（Deinitialization）： 当对象不再被使用时，Swift 自动将其销毁。在销毁之前，Swift 会调用对象的析构器（deinit）方法，您可以在析构器中执行一些清理工作，例如释放资源或取消订阅。
应用程序的生命周期
启动阶段（Launch）： 当用户启动应用程序时，系统会创建应用程序对象并开始其生命周期。在这个阶段，应用程序的生命周期从其 main 函数开始。
活跃阶段（Active）： 当应用程序处于前台并接收用户输入时，它处于活跃状态。在这个阶段，应用程序可以响应用户交互、执行任务等。
后台运行阶段（Background）： 当用户切换到另一个应用程序或将设备锁定时，应用程序会进入后台运行状态。在后台运行时，应用程序仍然可以执行某些任务，但受到系统资源限制。
挂起阶段（Suspended）： 如果应用程序在后台运行一段时间后没有活动，系统可能会将其挂起。在挂起状态下，应用程序的资源被释放，但它仍然保留在内存中。当用户再次打开应用程序时，系统会恢复其状态。
终止阶段（Termination）： 当用户手动关闭应用程序或系统需要释放资源时，应用程序会被终止。在终止之前，系统会调用应用程序的 applicationWillTerminate 方法，您可以在此方法中执行一些清理操作。
理解对象和应用程序的生命周期对于编写高效、健壮的应用程序至关重要。通过了解它们的生命周期，您可以更好地管理资源、优化性能并确保应用程序的正确行为。

UIViewController 的生命周期包括多个方法，每个方法都在不同的阶段被调用，允许开发者在不同的时机执行特定的操作。以下是 UIViewController 生命周期的详细说明：

init(nibName:bundle:) / init(coder:)
init(nibName:bundle:) 方法用于通过指定的 NIB 文件和 bundle 来初始化视图控制器。
init(coder:) 方法是通过解码器（coder）来初始化视图控制器，通常在使用 Interface Builder（Storyboard 或 XIB 文件）创建视图控制器时调用。
loadView()
loadView() 方法用于创建或加载视图控制器的视图层次结构。在这个方法中，您可以通过代码创建视图，也可以将视图从 Interface Builder 中加载到内存中。
viewDidLoad()
viewDidLoad() 方法在视图加载完成后调用，但在视图显示之前。通常用于执行一次性的初始化操作，例如配置界面元素、设置数据模型等。这个方法只会在视图加载时调用一次。
viewWillAppear(_:)
viewWillAppear(_:) 方法在视图即将显示在屏幕上之前调用。在这个方法中，您可以执行准备工作，例如刷新界面、更新数据、注册通知等。这个方法会在每次视图即将显示时调用。
viewDidAppear(_:)
viewDidAppear(_:) 方法在视图已经显示在屏幕上后调用。通常用于执行与用户交互相关的操作，例如启动动画、加载网络数据等。
viewWillDisappear(_:)
viewWillDisappear(_:) 方法在视图即将从屏幕上消失之前调用。在这个方法中，您可以执行一些清理操作，例如隐藏键盘、保存数据等。
viewDidDisappear(_:)
viewDidDisappear(_:) 方法在视图已经从屏幕上消失后调用。通常用于执行一些清理工作，例如释放资源、取消定时器等。
viewWillLayoutSubviews()
viewWillLayoutSubviews() 方法在视图的子视图即将布局之前调用。在这个方法中，您可以调整视图的布局和约束。
viewDidLayoutSubviews()
viewDidLayoutSubviews() 方法在视图的子视图已经完成布局之后调用。在这个方法中，您可以获取视图的最终布局信息并进行一些额外的布局调整。
didReceiveMemoryWarning()
didReceiveMemoryWarning() 方法在系统内存不足时调用，用于处理内存警告。您可以在这个方法中释放不必要的资源，以便系统回收内存。
deinit
deinit 方法在视图控制器被销毁之前调用，用于执行一些清理工作，例如取消注册通知、释放资源等。
这些方法组成了 UIViewController 生命周期的主要阶段，在开发过程中，您可以根据需要重写这些方法来实现特定的功能和操作。
